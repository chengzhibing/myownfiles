一、网络服务器：
1、组成：硬件：托管文件，交付文件的计算机。
2、分类：静态网络服务器：由一个计算机（硬件）和一个 HTTP 服务器（软件）组成，原样的传送托管文件到浏览器。
                动态网络服务器：由一个静态的网络服务器加上额外的软件组成，最普遍的是一个应用服务器 [application server] 和一个数据库 [database]；我们称它为 “动态” 因为这个应用服务器会在通过 HTTP 服务器传送托管文件到你的浏览器前，对这些托管文件进行更新。
3、简单的网络请求流程：要取得一个网页，如同我们已经说过的那样，你的浏览器会传送一个请求到网络服务器，而这个网络服务器会进而在它自己的存储空间中搜索所请求的文件。当找到这文件时，这个服务器会读取它，按需处理它，并且把它传送回浏览器。
4、专用网络服务器：严格来说，你可以在你自己的计算机上托管所有的这些文件，但是在一个专用的网络服务器上存储它们会方便得多，因为它（1）会一直启动和运行（2）会一直与互联网连接（3）会一直拥有一样的 IP 地址（不是所有的 ISPs 都会为家庭线提供一个固定的 IP 地址）（4）由一个第三方提供者维护
5、HTTP协议：一个协议 [protocol] 是一套为了在两台计算机间交流而制定的规则。 HTTP 是一个文本化的 [textual]，无状态的 [stateless] 协议。
     （1）文本化：所有的命令都是纯文本的 [plain-text] 和人类可读的 [human-readable]。
     （2）无状态：无论是服务器还是客户都不会记住之前的交流。举个例子，仅依靠 HTTP，一个服务器不能记住你输入的密码或者你正处于业务中的哪一步。你需要一个应用服务器来进行这样的工作。
     （3）只有用户可以制定 HTTP 请求，然后只会送到服务器。服务器只可以回复一个客户的 HTTP 请求。
当通过 HTTP 请求一个文件时，客户必须提供这个文件的 URL。
网络服务器必须应答每一个 HTTP 请求，至少也要回复一个错误信息。
6、在一个网络服务器上，HTTP 服务器要为处理和应答到来的请求负责任。

当收到一个请求时，一个 HTTP 服务器首先要检查所请求的 URL 是否与一个存在的文件相匹配。
如果是，网络服务器会传送文件内容回到浏览器。如果不是，一个应用服务器会建立必要的文件。
如果两种处理都不可能，网络服务器会返回一个错误信息到浏览器，最常见的是 “404 未找到” ["404 Not Found"]。（这错误太常见以至于很多网页设计者花费多数时间去设计 404 错误页面 [404 error pages]。）
二、域名：
1、任何连上互联网的电脑都可以通过一个公共IP地址访问到，对于IPv4来说，这个地址由32位组成（它们通常写成四个范围在0~255以内，由点分隔的数字组成，比如173.194.121.32），而对于IPv6来说，这个地址由128位组成，通常写成八组由冒号分隔的四进制数(e.g., 2027:0da8:8b73:0000:0000:8a2e:0370:1337)
2、域名：
1）结构：developer.mozilla.org从右往左读：顶级域名，一级域名，二级域名......
2）你不能 “购买一个域名”，你只能花钱获得一个域名在一年或多年内的使用权
3、域名系统：DNS：DNS 是计算机域名系统 (Domain Name System 或Domain Name Service) 的缩写，它是由解析器和域名服务器组成的。域名服务器是指保存有该网络中所有主机的域名和对应IP地址，并具有将域名转换为IP地址功能的服务器；
    2）将域名映射为IP地址的过程就称为“域名解析
    3）DNS服务器在域名解析过程中的查询顺序为：本地缓存记录、区域记录、转发域名服务器、根域名服务器。

三、互联网工作原理：连接到互联网的计算机被称作客户端和服务器
1）客户端：客户端是典型的Web用户入网设备（比如，你连接了Wi-Fi的电脑，或接入移动网络的手机）和设备上可联网的软件（通常使用像 Firefox 和 Chrome的浏览器）
2）服务器端：服务器是存储网页，站点和应用的计算机。当一个客户端设备想要获取一个网页时，一份网页的拷贝将从服务器上下载到客户端机器上来在用户浏览器上显示。
3）其他部分：@1网络连接: 允许你在互联网上发送和接受数据。基本上和你家到商店的街道差不多。
                       @2TCP/IP: 传输控制协议和英特网互连协议是定义数据如何传输的通信协议。这就像你下订单，去商店和买东西时所使用的传输机制。这里就像是一辆汽车或自行车（或是你能想到的其他可能）。
                      @3DNS: 域名系统服务器像是一本网站通讯录。当你在浏览器内输入一个网址时，浏览器获取网页之前将会查看域名系统。浏览器需要找到存放你想要的网页的服务器，才能发送 HTTP 请求到正确的地方。就像你要知道商店的地址才能到达那。
                      @4HTTP: 超文本传输协议是一个定义客户端和服务器间交流的语言的协议（protocol ）。就像你下订单时所说的话一样。
                      @5组成文件: 一个网页由许多文件组成，就像商店里不同的商品一样。这些文件有两种类型：
代码 : 网页大体由 HTML、CSS、JavaScript组成，不过你会在后面看到不同的技术。
资源 : 这是其他组成网页的东西的集合，比如图像、音乐、视频、Word文档、PDF文件。
四、流程：1、浏览器在域名系统服务器上找出存放网页的服务器的实际地址（找出商店的位置）。
2、浏览器发送 HTTP 请求信息到服务器来请拷贝一份网页到客户端（你走到商店并下订单）。这条消息，包括其他所有在客户端和服务器之间传递的数据都是通过互联网使用 TCP/IP 协议传输的。
3、服务器同意客户端的请求后，会返回一个“200 OK”信息，意味着“你可以查看这个网页，给你～”，然后开始将网页的文件以数据包的形式传输到浏览器（商店给你商品，你将商品带回家）。
4、浏览器将数据包聚集成完整的网页然后将网页呈现给你（商品到了你的门口）
五、基本上，当数据在Web上传输时，是以成千上万的小 数据块 的形式传输的。大量不同的用户都可以在同时下载同一个网页。如果网页以单个大的 数据块 形式传输，一次就只有一个用户下载，无疑会让Web非常没有效率并且失去很多乐趣。
六、网络相关概念：
     1)网页：一份能够显示在网络浏览器（如Firefox,，Google Chrome，Microsoft Internet Explorer 或Edge，Apple的Safari）上的文档。网页也常被称作"web pages"（网页）或者就叫"pages"（页面）。
    2）网站（website）：一个由许多组合在一起，并常常以各种方式相互连接的网页组成的集合。网站常被称作"web site"（网站）或简称"site"（站点）。
    3）网络服务器（web server）：一个在互联网上托管网站的计算机。
    4）搜索引擎（search engine）：帮助你寻找其他网页的网站，比如Google，Bing，或Yahoo。
七、服务器端编程:
    1、客户端编程和服务器端编程的区别：在浏览器端运行的代码被称为客户端代码，并且主要涉及所呈现的网页的外观和行为的改进。这就包括选择和设计UI元素、布局、导航、表单验证等。相反的，服务器端网站编程主要涉及，对于相应的请求，选择所要返回给浏览器的内容。服务器端代码解决这样一些问题，比如验证提交的数据和请求、使用数据库来存储和检索信息及发送给用户正如他们所请求的的正确内容。
    1）客户端代码使用 HTML，CSS，和JavaScript 来编写；服务器端代码可以用任何一种编程语言进行编写――比较受欢迎的服务器端编程语言包括PHP、Python、Ruby和C#。服务器端代码有充分的权限访问服务器的操作系统，并且开发者可以选择他们乐意使用的编程语言（和特定版本的语言）。
   2、你可以在服务器端做什么？1）信息的高效存储和传输；例如：模糊搜索。2）定制用户体验，地图的搜索附近的商店，娱乐，美食等；3）控制对内容的访问，客户登录和不登录能做不同的事；4）存储会话和状态信息：下次进入查看历史记录；5）通知和通讯：注册账户以后，发送激活信息到邮箱。6）数据分析：根据客户最近浏览的商品做出推荐购买的类似的商品。
八、浏览器发送请求到网络服务器，这个请求所包含的内容：
    1、一个用来识别目标服务或者资源（比如一个HTML文档、存储在服务器上的一个特定的数据、或者一个用来运行的工具等）的URL。
    2、一个定义了请求行为的方法（比如，获得一个文档或者上传某些数据）。不同的方法/动作以及与他们相关的行为罗列如下：
    1）GET：获取一份特定资源（比如一个包含了一个产品或者一系列产品相关信息的HTML文档）。
    2）POST：创建一份新的资源（比如给wiki增加一片新的文章、给数据库增加一个新的节点）。
    3）HEAD:  获取有关特定资源的元数据信息，而不会得到像GET那样获取资源的内容部分。例如，您可以使用HEAD请求来查找上次更新资源的时间，然后仅使用（更“昂贵”）GET请求下载资源（如果已更改）。
    4）PUT：更新一份已经存在的资源（或者在不存在的情况下创建一份新的）。
    5）DELETE：删除特定资源。
    6）TRACE、OPTIONS、CONNECT、PATCH等动作是为一些不常见任务设计的，因此我们在这里的讲解不会涉及到他们。
3、额外的信息可以和请求一起被解码（比如HTML格式的数据）。信息可以被解码成如下：
    1）URL参数：GET请求通过在URL末尾增加的键值对，来解码包含在发送给服务器的URL中的数据――比如，http://mysite.com?name=Fred&age=11，你经常会用到问号（？）来将URL剩余的部分和URL参数分隔开来，一个赋值符号（=）将名称和与之相关的值分隔开来，然后一个“&”符号分割不同的键值对。当他们被用户改变然后提交时，URL参数具有与生俱来地“不安全性”。因此，一个URL参数或者GET请求是不会用来在服务器上更新数据库的。
    2）POST数据：POST请求会增加新的资源，支持这个的数据在请求主体内部被解码。
客户端cookie：cookies包含与客户相关的会话数据，服务器可以用这些数据来判断用户的登录状态以及用户是否有访问资源的权限。
九、网络服务器等待来自客户的请求信息，当信息到达时处理它们，然后用HTTP回应消息来答复网络浏览器。
       1）回应包含一个HTTP相应状态码（HTTP Response status code）indicating whether or not the request succeeded (e.g. "200 OK" for success, "404 Not Found" if the resource cannot be found, "403 Forbidden" if the user isn't authorised to see the resource, etc). The body of a successful response to a GET request would contain the requested resource.
       2）当一个HTML页面被返时，页面会被网络浏览器渲染出来。作为处理工作的一部分，浏览器会发现指向其他资源的链接（比如，一个HTML页面通常会参考Javascript和CSS页面），并且会发送独立的HTTP请求来下载这些文件。
十、GET请求/响应模型：你可以通过点击一个链接或者在网站进行一次搜索（比如搜索引擎的首页）做出一次简单的GET请求。
    1、请求

每一行请求都包含着相关信息。第一部分被称为header，并且包含着关于这个请求的有用信息，同样地一个HTML head包含着关于HTML文档的有用信息（但是却没有内容自身，内容在主体里面）。
GET https://developer.mozilla.org/en-US/search?q=client+server+overview&topic=apps&topic=html&topic=css&topic=js&topic=api&topic=webdev HTTP/1.1
Host: developer.mozilla.org
Connection: keep-alive
Pragma: no-cache
Cache-Control: no-cache
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Referer: https://developer.mozilla.org/en-US/
Accept-Encoding: gzip, deflate, sdch, br
Accept-Charset: ISO-8859-1,UTF-8;q=0.7,*;q=0.7
Accept-Language: en-US,en;q=0.8,es;q=0.6
Cookie: sessionid=6ynxs23n521lu21b1t136rhbv7ezngie; csrftoken=zIPUJsAZv6pcgCBJSCj1zU6pQZbfMUAT; dwf_section_edit=False; dwf_sg_task_completion=False; _gat=1; _ga=GA1.2.1688886003.1471911953; ffo=true
1）第一行和第二行包含了我们在上面讨论过的最重要的信息：

请求类型（GET）。
目标资源的URL（/en-US/search）。
URL参数（q=client%2Bserver%2Boverview&topic=apps&topic=html&topic=css&topic=js&topic=api&topic=webdev）。
目标网站（developer.mozilla.org）。
第一行的末尾也包含了一个简短的包含了标识协议版本的字符串（HTTP/1.1）。
最后一行包括一些关于客户端cookies的信息――你可以看到在这种情况下cookies包含一个为处理远程会话准备的ID（Cookie: sessionid=6ynxs23n521lu21b1t136rhbv7ezngie; ...）。

剩余几行包含着所使用的浏览器以及浏览器所能处理的回应类型等信息。比如，你可以在下面看到这些相关信息：

我的浏览器上(User-Agent)是火狐(Mozilla/5.0).
它可以接收gzip压缩信息(Accept-Encoding: gzip).
它可以接收的具体编码类型(Accept-Charset: ISO-8859-1,UTF-8;q=0.7,*;q=0.7)和语言(Accept-Language: de,en;q=0.7,en-us;q=0.3).
The Referer line提示这个网页的地址可能包含指向这个资源的链接(i.e. the origin of the request, https://developer.mozilla.org/en-US/).
2、回应
HTTP/1.1 200 OK
Server: Apache
X-Backend-Server: developer1.webapp.scl3.mozilla.com
Vary: Accept,Cookie, Accept-Encoding
Content-Type: text/html; charset=utf-8
Date: Wed, 07 Sep 2016 00:11:31 GMT
Keep-Alive: timeout=5, max=999
Connection: Keep-Alive
X-Frame-Options: DENY
Allow: GET
X-Cache-Info: caching
Content-Length: 41823



<!DOCTYPE html>
<html lang="en-US" dir="ltr" class="redesign no-js"  data-ffo-opensanslight=false data-ffo-opensans=false >
<head prefix="og: http://ogp.me/ns#">
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=Edge">
  <script>(function(d) { d.className = d.className.replace(/\bno-js/, ''); })(document.documentElement);</script>
  ...
第一行包括了回应状态码200 OK，这告诉我们请求是成功的。
 我们可以看到回应是文本/html格式的(Content-Type).
我们也可以看到它使用的是UTF-8字符集(Content-Type: text/html; charset=utf-8).
The head也告诉我们它有多大(Content-Length: 41823).
在消息的末尾我们可以看到主体内容――包含了针对请求返回的真实的HTML。
请求的剩余部分还包括一些关于回应的信息（比如回应应该什么时候生成？），有关服务器的信息，还有它期望浏览器如何处理这个包（比如，the X-Frame-Options: DENY line tells the browser not to allow this page to be embedded in an <iframe> in another site）。
十一、当你提交一个表单，并且希望表单所包含的信息存储到服务器的时候，你就生成了一次HTTP POST请求。
请求

下面的文本展示了当用户在网站上提交新的文件的时候，生成的一个HTTP请求求的格式和之前展示的GET请求是非常相似的，只是第一行标识这个请求为POST。
POST https://developer.mozilla.org/en-US/profiles/hamishwillee/edit HTTP/1.1
Host: developer.mozilla.org
Connection: keep-alive
Content-Length: 432
Pragma: no-cache
Cache-Control: no-cache
Origin: https://developer.mozilla.org
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36
Content-Type: application/x-www-form-urlencoded
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Referer: https://developer.mozilla.org/en-US/profiles/hamishwillee/edit
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.8,es;q=0.6
Cookie: sessionid=6ynxs23n521lu21b1t136rhbv7ezngie; _gat=1; csrftoken=zIPUJsAZv6pcgCBJSCj1zU6pQZbfMUAT; dwf_section_edit=False; dwf_sg_task_completion=False; _ga=GA1.2.1688886003.1471911953; ffo=true

csrfmiddlewaretoken=zIPUJsAZv6pcgCBJSCj1zU6pQZbfMUAT&user-username=hamishwillee&user-fullname=Hamish+Willee&user-title=&user-organization=&user-location=Australia&user-locale=en-US&user-timezone=Australia%2FMelbourne&user-irc_nickname=&user-interests=&user-expertise=&user-twitter_url=&user-stackoverflow_url=&user-linkedin_url=&user-mozillians_url=&user-facebook_url=
最主要的不同在于URL不再包含任何参数。正如你所见，表单提交的信息被编码后放入消息主体中了。(比如：新的用户全名像这样处理的：&user-fullname=Hamish+Willee)
响应

请求的响应如下。状态码"302 FOUND"告知浏览器服务端已收到它提交的请求。它必须再发生第二个请求来获取相关的页面内容。 The information is otherwise similar to that for the response to a GET request.

HTTP/1.1 302 FOUND
Server: Apache
X-Backend-Server: developer3.webapp.scl3.mozilla.com
Vary: Cookie
Vary: Accept-Encoding
Content-Type: text/html; charset=utf-8
Date: Wed, 07 Sep 2016 00:38:13 GMT
Location: https://developer.mozilla.org/en-US/profiles/hamishwillee
Keep-Alive: timeout=5, max=1000
Connection: Keep-Alive
X-Frame-Options: DENY
X-Cache-Info: not cacheable; request wasn't a GET or HEAD
Content-Length: 0